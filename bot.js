import dotenv from 'dotenv';
dotenv.config({ path: './bot.env' });

import TelegramBot from 'node-telegram-bot-api';
import sqlite3 from 'sqlite3';
import { open } from 'sqlite';

const token = process.env.TELEGRAM_TOKEN;
if (!token) {
  console.error('–û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å SQLite
async function getDbConnection() {
  try {
    return open({
      filename: './todolist.sqlite',
      driver: sqlite3.Database
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite:', error);
    return null;
  }
}

// –ö–æ–º–∞–Ω–¥—ã /start –∏ /help (–±–µ–∑ —Ä–∞–±–æ—Ç—ã —Å –ë–î)
bot.onText(/\/start/, async (msg) => {
  const welcome = `
üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TODO-–±–æ—Ç!
/tasks <—Ç–æ–∫–µ–Ω> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏
/add <—Ç–æ–∫–µ–Ω> <–∑–∞–¥–∞—á–∞> ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/delete <—Ç–æ–∫–µ–Ω> <–Ω–æ–º–µ—Ä> ‚Äî –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
/edit <—Ç–æ–∫–µ–Ω> <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç> ‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
/help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É`;
  await bot.sendMessage(msg.chat.id, welcome);
});

bot.onText(/\/help/, async (msg) => {
  const help = `
üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:
/tasks <—Ç–æ–∫–µ–Ω> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏
/add <—Ç–æ–∫–µ–Ω> <–∑–∞–¥–∞—á–∞> ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/delete <—Ç–æ–∫–µ–Ω> <–Ω–æ–º–µ—Ä> ‚Äî –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
/edit <—Ç–æ–∫–µ–Ω> <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç> ‚Äî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É`;
  await bot.sendMessage(msg.chat.id, help);
});

// –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
bot.onText(/\/tasks (.+)/, async (msg, match) => {
  const authToken = match[1].trim();
  const db = await getDbConnection();
  if (!db) {
    return bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
  try {
    const user = await db.get(
      'SELECT id, username FROM users WHERE auth_token = ?',
      authToken
    );
    if (!user) {
      return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
    }
    const tasks = await db.all(
      'SELECT id, text FROM items WHERE user_id = ? ORDER BY id',
      user.id
    );
    if (tasks.length === 0) {
      return bot.sendMessage(msg.chat.id, `üìù ${user.username}, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.`);
    }
    const list = tasks.map((t, i) => `${i + 1}. ${t.text}`).join('\n');
    await bot.sendMessage(msg.chat.id, `üìã –ó–∞–¥–∞—á–∏ ${user.username}:\n\n${list}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', err);
    await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á');
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
bot.onText(/\/add (.+?) (.+)/, async (msg, match) => {
  const authToken = match[1].trim();
  const taskText = match[2].trim();
  if (!taskText) {
    return bot.sendMessage(msg.chat.id, '‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: /add <—Ç–æ–∫–µ–Ω> <–∑–∞–¥–∞—á–∞>');
  }
  const db = await getDbConnection();
  if (!db) {
    return bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
  try {
    const user = await db.get(
      'SELECT id, username FROM users WHERE auth_token = ?',
      authToken
    );
    if (!user) {
      return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
    }
    await db.run(
      'INSERT INTO items (text, user_id) VALUES (?, ?)',
      taskText, user.id
    );
    await bot.sendMessage(msg.chat.id, `‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è ${user.username}: "${taskText}"`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', err);
    await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
  }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
bot.onText(/\/delete (.+?) (\d+)/, async (msg, match) => {
  const authToken = match[1].trim();
  const taskNumber = parseInt(match[2], 10);
  const db = await getDbConnection();
  if (!db) {
    return bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
  try {
    const user = await db.get(
      'SELECT id, username FROM users WHERE auth_token = ?',
      authToken
    );
    if (!user) {
      return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
    }
    const tasks = await db.all(
      'SELECT id, text FROM items WHERE user_id = ? ORDER BY id',
      user.id
    );
    if (taskNumber < 1 || taskNumber > tasks.length) {
      return bot.sendMessage(msg.chat.id, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –£ –≤–∞—Å ${tasks.length} –∑–∞–¥–∞—á(–∏)`);
    }
    const { id: taskId, text } = tasks[taskNumber - 1];
    await db.run(
      'DELETE FROM items WHERE id = ? AND user_id = ?',
      taskId, user.id
    );
    await bot.sendMessage(msg.chat.id, `‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: "${text}"`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', err);
    await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
  }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
bot.onText(/\/edit (.+?) (\d+) (.+)/, async (msg, match) => {
  const authToken = match[1].trim();
  const taskNumber = parseInt(match[2], 10);
  const newText = match[3].trim();
  if (!newText) {
    return bot.sendMessage(msg.chat.id, '‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: /edit <—Ç–æ–∫–µ–Ω> <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç>');
  }
  const db = await getDbConnection();
  if (!db) {
    return bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
  try {
    const user = await db.get(
      'SELECT id, username FROM users WHERE auth_token = ?',
      authToken
    );
    if (!user) {
      return bot.sendMessage(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
    }
    const tasks = await db.all(
      'SELECT id, text FROM items WHERE user_id = ? ORDER BY id',
      user.id
    );
    if (taskNumber < 1 || taskNumber > tasks.length) {
      return bot.sendMessage(msg.chat.id, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏. –£ –≤–∞—Å ${tasks.length} –∑–∞–¥–∞—á(–∏)`);
    }
    const { id: taskId, text: oldText } = tasks[taskNumber - 1];
    await db.run(
      'UPDATE items SET text = ? WHERE id = ? AND user_id = ?',
      newText, taskId, user.id
    );
    await bot.sendMessage(
      msg.chat.id,
      `‚úèÔ∏è –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n\n–ë—ã–ª–æ: "${oldText}"\n–°—Ç–∞–ª–æ: "${newText}"`
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', err);
    await bot.sendMessage(msg.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  if (!msg.text || msg.text.startsWith('/')) return;
  await bot.sendMessage(msg.chat.id, '‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help');
});

console.log('ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
